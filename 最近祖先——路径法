import java.util.HashMap;

/**
 * Created by zgy on 2017/3/23.
 */
public class LcaSolutionPath {
    static int depth1 = -1;
    static int depth2 = -1;
    static BNode findFirstAncestor_2(BNode node1,BNode node2,BNode root){
        HashMap<BNode,BNode> childToParent = new HashMap<>();
        BNode pre = null;
        int depth = 0;
        dfs(node1,node2,root,pre,depth,childToParent);
        int distance = depth1 - depth2;
        if(distance > 0){
            for(;distance > 0;distance--)node1 = childToParent.get(node1);
        }
        else {
            for(;-distance > 0;distance++)node2 = childToParent.get(node2);
        }
        while (node1 != node2){
            node1 = childToParent.get(node1);
            node2 = childToParent.get(node2);
        }
        return node1;

    }

    static void  dfs(BNode node1,BNode node2,BNode root,BNode pre,int depth,HashMap<BNode,BNode> childToParent){
        if(root == null)return;
        if(depth1 != -1 && depth2 != -1)return;
        if(root == node1)depth1 = depth;
        if(root == node2)depth2 = depth;
        childToParent.put(root,pre);
        dfs(node1,node2,root.left,root,depth+1,childToParent);
        dfs(node1, node2, root.right, root, depth+1, childToParent);
    }
}
